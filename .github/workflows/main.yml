name: github-actions-ci/cd

on:
  push:
    branches: [deploy_junil]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      DOCKER_USERNAME: ${{ 
        github.ref_name == 'deploy_junil' && secrets.DOCKER_USERNAME_JUNIL
        }}
      DOCKER_PASSWORD: ${{ 
        github.ref_name == 'deploy_junil' && secrets.DOCKER_PASSWORD_JUNIL
        }}
      APPLICATION_SECRET: ${{ 
        github.ref_name == 'deploy_junil' && secrets.APPLICATION_SECRET_JUNIL
        }}
      REACT_ENV: ${{ 
        github.ref_name == 'deploy_junil' && secrets.REACT_ENV_JUNIL
        }}
      BUILD_MODE: ${{ 
        github.ref_name == 'deploy_junil' && 'junil'
        }}
      SSH_HOST: ${{ 
        github.ref_name == 'deploy_junil' && secrets.SSH_HOST_JUNIL
        }}
      SSH_KEY: ${{ 
        github.ref_name == 'deploy_junil' && secrets.SSH_KEY_JUNIL
        }}
    steps:
      - name: checkout
        uses: actions/checkout@v5.0.0
        with:
          ref: ${{ github.ref }}
        
      - name: docker login
        run: echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

      - name: install JDK 21
        uses: actions/setup-java@v5.0.0
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: build spring boot app
        run: |
          cd running_back_S2
          echo ${{ env.APPLICATION_SECRET }} | base64 --decode > ./src/main/resources/application-secret.yml
          chmod 777 ./mvnw
          ./mvnw clean package -DskipTests
          docker build -t ${{ env.DOCKER_USERNAME }}/spring-app:latest .
          docker push ${{ env.DOCKER_USERNAME }}/spring-app:latest

      - name: build react app
        run: |
          cd running_front_S2
          echo ${{ env.REACT_ENV }} | base64 --decode > .env
          ls -a
          cat .env
          docker build --build-arg SERVERNAME=${{ env.BUILD_MODE }} -t ${{ env.DOCKER_USERNAME }}/react-app:latest .
          docker push ${{ env.DOCKER_USERNAME }}/react-app:latest

      - name: ssh 배포
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.SSH_HOST }}
          username: ubuntu
          key: ${{ env.SSH_KEY }}
          script: |
            cd /home/ubuntu/project

            sudo docker-compose pull
            sudo docker-compose down
            sudo docker-compose up -d






        
